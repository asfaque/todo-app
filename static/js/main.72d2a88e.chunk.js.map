{"version":3,"sources":["pages/ToDo/function.js","components/TodoList/TodoList.js","components/AddTodo/function.js","components/AddTodo/AddTodo.js","pages/ToDo/index.js","App.js","serviceWorker.js","index.js"],"names":["shouldComponentUpdate","nextProps","nextState","componentWillMount","addToDo","list","lists","this","state","setState","updateToDo","id","newTodo","items","map","item","content","onChanged","e","preventDefault","target","value","deleteHandler","filter","clearAll","mapStateToProps","mapDispatchToProps","dispatch","TodoList","editValue","props","editItem","onChange","inputElement","React","createRef","editHandler","_","isUndefined","isNull","current","focus","saveHandler","className","type","readOnly","ref","onClick","Component","onHandleChange","handleSubmit","uuid","AddTodo","f","bind","onSubmit","ToDo","length","index","key","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72d2a88e.chunk.js","sourcesContent":["export default {\r\n    /**********************LifeCycle Components in Order **********************************/\r\n\r\n    shouldComponentUpdate: function (nextProps, nextState) {\r\n       \r\n    },\r\n\r\n    componentWillMount: function () {\r\n       \r\n    },\r\n\r\n    /***********************Additonal Functions to be used within component ***************/\r\n    addToDo: function(list) {\r\n        let lists = [...this.state.lists, list]\r\n\r\n        this.setState({\r\n            lists: lists\r\n        })\r\n    },\r\n\r\n    updateToDo: function(id, newTodo) {\r\n        const items = this.state.lists\r\n        \r\n        items.map(item => {\r\n            if (item.id === id) {\r\n                item.content = newTodo;\r\n                item.id=id\r\n            }\r\n            return item\r\n        })\r\n\r\n        this.setState({\r\n            lists: items\r\n        })\r\n\r\n    },\r\n\r\n    onChanged: function(e) {\r\n        e.preventDefault();\r\n        if(e.target.value !== '') {\r\n            this.setState({\r\n                content: e.target.value\r\n            })\r\n        }\r\n    },\r\n\r\n    deleteHandler: function(id) {\r\n        const lists = this.state.lists.filter(list => {\r\n            return list.id !== id\r\n        });\r\n\r\n        this.setState({\r\n            lists: lists\r\n        })\r\n    },\r\n\r\n    clearAll: function() {\r\n        this.setState({\r\n            lists: []\r\n        })\r\n    },\r\n\r\n    /**********************Connecting and defining the Redux ******************************/\r\n    mapStateToProps: function (state) {\r\n        return {\r\n        }\r\n    },\r\n    mapDispatchToProps: function (dispatch) {\r\n        return {\r\n\r\n        }\r\n    },\r\n}\r\n// Local functions limitng to only this component","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport './styles.scss';\r\n\r\nclass TodoList extends Component {\r\n    state={\r\n        editValue: this.props.list.content,\r\n        editItem: false\r\n    }\r\n\r\n    onChange = (e) => {\r\n        if(e.target.value !== '') {\r\n            this.setState({\r\n                editValue: e.target.value\r\n            })\r\n        }\r\n    }\r\n\r\n    inputElement = React.createRef();\r\n\r\n    editHandler = () => {\r\n        this.setState({\r\n            editItem: true,\r\n        });\r\n\r\n        if(!_.isUndefined(this.inputElement) && !_.isNull(this.inputElement)) {\r\n            this.inputElement.current.focus();\r\n        }\r\n        \r\n    }\r\n\r\n    saveHandler = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.editItem !== '') {\r\n            this.props.updateToDo(this.props.id, this.state.editValue)\r\n\r\n            this.setState({\r\n                editItem: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-item\" id={this.props.id}>\r\n                <div className=\"list-item-inner\">\r\n                    <input type=\"text\" onChange={this.onChange} value={this.state.editValue} readOnly={this.state.editItem ? false : true} ref={this.inputElement} />\r\n                </div>\r\n                <div className=\"list-item-action\">\r\n                    {this.state.editItem ?\r\n                        <button\r\n                            onClick={this.saveHandler}\r\n                            className=\"saveBtn\"\r\n                        >\r\n                            Save\r\n                        </button>\r\n                        :\r\n                        <button\r\n                            onClick={this.editHandler}\r\n                            className=\"editBtn\"\r\n                        >\r\n                            Edit\r\n                        </button>\r\n                    }\r\n                    <button\r\n                        onClick={this.props.deleteHandler}\r\n                        className=\"deleteBtn\"\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import uuid from 'uuid';\r\n\r\nexport default {\r\n    /**********************LifeCycle Components in Order **********************************/\r\n\r\n    shouldComponentUpdate: function (nextProps, nextState) {\r\n       \r\n    },\r\n\r\n    componentWillMount: function () {\r\n       \r\n    },\r\n\r\n    /***********************Additonal Functions to be used within component ***************/\r\n    onHandleChange: function(e){\r\n        e.preventDefault();\r\n        if(e.target.value !== '') {\r\n            this.setState({\r\n                content: e.target.value\r\n            })\r\n        }\r\n    },\r\n\r\n    handleSubmit: function(e){\r\n        e.preventDefault();\r\n        if(this.state.content !== '') {\r\n            this.props.addToDo(this.state);\r\n            this.setState({\r\n                content: '',\r\n                id: uuid()\r\n            })\r\n        }\r\n    },\r\n\r\n    /**********************Connecting and defining the Redux ******************************/\r\n    mapStateToProps: function (state) {\r\n        return {\r\n        }\r\n    },\r\n    mapDispatchToProps: function (dispatch) {\r\n        return {\r\n\r\n        }\r\n    },\r\n}\r\n// Local functions limitng to only this component","import React, { Component } from 'react';\r\nimport f from './function';\r\nimport './styles.scss';\r\nimport uuid from 'uuid';\r\n\r\nclass AddTodo extends Component {\r\n    state={\r\n        content: '',\r\n        id: uuid()\r\n    }\r\n\r\n    onHandleChange = f.onHandleChange.bind(this);\r\n    handleSubmit = f.handleSubmit.bind(this);\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-inner\">\r\n                <h3 className=\"heading\">Add Todo</h3>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-field\">\r\n                        <input \r\n                            className=\"input-field\"\r\n                            type=\"text\"\r\n                            onChange={this.onHandleChange}\r\n                            value={this.state.content}\r\n                        />\r\n                        <button\r\n                            onClick={this.handleSubmit}\r\n                            className=\"addBtn\"\r\n                        >\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport f from './function';\r\nimport './styles.scss';\r\nimport TodoList from '../../components/TodoList/TodoList';\r\nimport AddTodo from '../../components/AddTodo/AddTodo';\r\nimport uuid from 'uuid';\r\n\r\nclass ToDo extends Component {\r\n    state={\r\n        lists: [],\r\n        id: uuid()\r\n    }\r\n\r\n    addToDo = f.addToDo.bind(this);\r\n    updateToDo = f.updateToDo.bind(this);\r\n    deleteHandler = f.deleteHandler.bind(this);\r\n    clearAll = f.clearAll.bind(this);\r\n   \r\n    render() {\r\n        return (\r\n            <div className=\"todo\">\r\n                <AddTodo addToDo={this.addToDo} />\r\n                <div className=\"todo-inner\">\r\n                    {this.state.lists.length > 0 ?\r\n                        this.state.lists.map((list, index) =>\r\n                            <TodoList \r\n                                list={list}\r\n                                saveHandler={this.saveHandler}\r\n                                deleteHandler={() => this.deleteHandler(list.id)}\r\n                                id={list.id}\r\n                                key={index}\r\n                                updateToDo={this.updateToDo}\r\n                            />\r\n                        )\r\n                        :\r\n                        <p className=\"noitem\">No Todos left yay!</p>\r\n                    }\r\n                </div>\r\n                {this.state.lists.length > 0 &&\r\n                    <button onClick={this.clearAll} className=\"clear-btn\">Clear All</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\nimport ToDo from './pages/ToDo';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <ToDo />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}